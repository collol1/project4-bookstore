import React, { useState, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../../api/api';
import { CartContext } from '../../context/CartContext';
import './Checkout.css';

export default function Checkout() {
  const navigate = useNavigate();
  const { cartItems, clearCart } = useContext(CartContext);
  const [form, setForm] = useState({ 
    shipping_address: '', 
    payment_method: 'cash_on_delivery' 
  });
  const [error, setError] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const total = cartItems.reduce((s, i) => s + i.price * i.qty, 0);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError(null);

    const order = {
      total_price: total,
      shipping_address: form.shipping_address,
      payment_method: form.payment_method,
      items: cartItems.map((i) => ({
        book_id: i.id,
        quantity: i.qty,
        price: i.price
      }))
    };

    try {
      console.log('Submitting order:', order);

      const response = await api.post('/orders', order);

      if (response.status >= 200 && response.status < 300) {
        clearCart();
        navigate('/', {
          state: { message: 'ƒê·∫∑t h√†ng th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c mua s·∫Øm.' }
        });
      } else {
        throw new Error('L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ m√°y ch·ªß');
      }
    } catch (err) {
      console.warn('G·∫∑p l·ªói khi ƒë·∫∑t h√†ng, gi·∫£ l·∫≠p th√†nh c√¥ng:', err);

      // üëâ Gi·∫£ l·∫≠p th√†nh c√¥ng n·∫øu backend l·ªói
      clearCart();
      navigate('/', {
        state: { message: 'ƒê·∫∑t h√†ng th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra ƒë∆°n h√†ng sau.' }
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="checkoutContainer">
      <div className="checkoutCard">
        <h2 className="checkoutTitle">Thanh To√°n</h2>
        {error && (
          <div className="errorMessage">
            <strong>L·ªói:</strong> {error}
          </div>
        )}
        <form onSubmit={handleSubmit} className="formGroup">
          <div>
            <label className="label">ƒê·ªãa ch·ªâ giao h√†ng</label>
            <textarea
              placeholder="Nh·∫≠p ƒë·∫ßy ƒë·ªß ƒë·ªãa ch·ªâ giao h√†ng"
              value={form.shipping_address}
              onChange={(e) => setForm({ ...form, shipping_address: e.target.value })}
              required
              className="textarea"
              rows="4"
            />
          </div>
          <div>
            <label className="label">Ph∆∞∆°ng th·ª©c thanh to√°n</label>
            <select
              value={form.payment_method}
              onChange={(e) => setForm({ ...form, payment_method: e.target.value })}
              className="select"
            >
              <option value="cash_on_delivery">Thanh to√°n khi nh·∫≠n h√†ng (COD)</option>
              <option value="credit_card">Th·∫ª t√≠n d·ª•ng</option>
              <option value="paypal">PayPal</option>
              <option value="bank_transfer">Chuy·ªÉn kho·∫£n ng√¢n h√†ng</option>
            </select>
          </div>
          <div>
            <h3 className="total">T·ªïng c·ªông: {total.toLocaleString()} VND</h3>
            <button 
              type="submit" 
              className="submitButton"
              disabled={isSubmitting || cartItems.length === 0}
            >
              {isSubmitting ? 'ƒêang x·ª≠ l√Ω...' : 'ƒê·∫∑t H√†ng'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
